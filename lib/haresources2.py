"""
This module provies parsing libraries for 'haresources2' configuration files.

'haresources2' is customized for Orchestra's HPC environment at
Harvard Medical School.

"""
#!/usr/bin/env python
import sys
import os
import re
import copy
import string

# Utility functions

def template(s):
    return string.Template(s).substitute

def appendat(dick, key, item):
    if key in dick.keys():
        dick[key].append(item)
    else:
        dick.setdefault(key, [item])            

ip_address_regex = r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'

def cpd(d):
    """return a copy of a dictionary reference and set default values"""
    if 'type' not in d.keys():
        d.setdefault('type', 'ip')
    return copy.deepcopy(d)

# Test data

test_config_valid="""
#
#

testservice:
    ldirectord
    [cobo]
    10.0.0.5/24/eth2

notreal.amazon.instancedata.ip:
    ip
    [turnstile cobo]
    169.254.169.254/28/eth0
    169.254.169.253/28/eth0

transfer.orchestra:
#     ldirectord
     [turnstile cobo]
     10.0.64.47/22/eth2
                                
"""

# Parsing and generating functions

def parse(txt):
    """
    Accepts a string in 'orchestra_haresources' syntax, parses it and returns a
    pythong list of dictionaries in the format:
    { 'name' : <service_name>,
      'ips' : [ <list_of_cidr/nic specs...> ],
      'type' : ('ldirectord'|'ip'),
      'loadbalancers' : [ <list of hostnames...> ]
      }
    """
    results=[]
    current_dict=None
    linenum=0
    iprx=re.compile(ip_address_regex)
    for line in txt.split('\n'):
        linenum += 1
        item=line.strip()
        if item.startswith('#') or item == '':
            continue
        if item[-1:] == ':':
            if current_dict is not None:
                results.append(cpd(current_dict))
            current_dict={}
            current_dict.setdefault('name', item[:-1])
        elif iprx.match(item):
            appendat(current_dict, 'ips', item)
        elif item[0] == '[' and item[-1:] == ']':
            if ',' in item:
                items=item[1:-1].split(',')
            else:
                items=item[1:-1].split()
            for balancer in items:
                appendat(current_dict, 'loadbalancers', balancer)
        elif item in ['ldirectord', 'ip']:
            if 'type' in current_dict.keys():
                sys.stderr.write('Syntax error in lbconfig at line %s\n' % linenum)
                sys.stderr.write("%s\n" % line)
                sys.stderr.write('type already defined for this service\n %s\n' % current_dict)
                return None
            current_dict.setdefault('type', item)
        else:
            sys.stderr.write('Syntax error on line %s of lbconfig\n' % linenum)
            print line
            return None
    results.append(cpd(current_dict))
    return results

def generate(config_list):
    """Given a config_list as generated by parse,
    return valid haresources2 syntax string"""
    tmpl=template("""
${name}:
    ${type}
    ${lb_list}
    ${ip_list}""")
    lst=[]
    for item in config_list:
        subs={
            'lb_list' : "[%s]" % ' '.join(item['loadbalancers']),
            'type' : item['type'],
            'name' : item['name'],
            'ip_list' : '\n    '.join(item['ips'])}
        lst.append(tmpl(subs))
    return '\n'.join(lst)

if __name__=='__main__':
    lst = parse(test_config_valid)
    for x in lst:
        print x
    print generate(lst)

def load(filename):
    return parse(file(filename).read())
